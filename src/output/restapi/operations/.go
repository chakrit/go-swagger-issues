package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
  "net/http"

  "output/models"
  
  
)

// HandlerFunc turns a function with the right signature into a  handler
type HandlerFunc func(Params) (*models.Model, error)

func (fn HandlerFunc) Handle(params Params) (*models.Model, error) {
  return fn(params)
}

// Handler interface for that can handle valid  params
type Handler interface {
  Handle(Params) (*models.Model, error)
}

// New creates a new http.Handler for the  operation
func New(ctx *middleware.Context, handler Handler) * {
  return &{Context: ctx, Handler: handler}
}


type  struct {
  Context *middleware.Context
  Params  Params
  Handler Handler
}

func (o *) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
  route, _ := o.Context.RouteInfo(r)

  
  if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
    o.Context.Respond(rw, r, route.Produces, route, err)
    return
  }

  
  res, err := o.Handler.Handle(o.Params) // actually handle the request
  if err != nil {
    o.Context.Respond(rw, r, route.Produces, route, err)
    return
  }
  o.Context.Respond(rw, r, route.Produces, route, res)
  
}
