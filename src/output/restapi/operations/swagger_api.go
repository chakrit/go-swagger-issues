package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/spec"
	"github.com/go-swagger/go-swagger/strfmt"
)

// NewSwaggerAPI creates a new Swagger instance
func NewSwaggerAPI(spec *spec.Document) *SwaggerAPI {
	s := &SwaggerAPI{
		spec:            spec,
		handlers:        make(map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
	}

	return s
}

// SwaggerAPI test api
type SwaggerAPI struct {
	spec            *spec.Document
	context         *middleware.Context
	handlers        map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string

	// Handler sets the operation handler for the  operation
	Handler Handler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)
}

// SetDefaultProduces sets the default produces media type
func (s *SwaggerAPI) SetDefaultProduces(mediaType string) {
	s.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (s *SwaggerAPI) SetDefaultConsumes(mediaType string) {
	s.defaultConsumes = mediaType
}

// DefaultProduces returns the default produces media type
func (s *SwaggerAPI) DefaultProduces() string {
	return s.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (s *SwaggerAPI) DefaultConsumes() string {
	return s.defaultConsumes
}

// Formats returns the registered string formats
func (s *SwaggerAPI) Formats() strfmt.Registry {
	return s.formats
}

// RegisterFormat registers a custom format validator
func (s *SwaggerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	s.formats.Add(name, format, validator)
}

// Validate validates the registrations in the SwaggerAPI
func (s *SwaggerAPI) Validate() error {
	var unregistered []string

	if s.Handler == nil {
		unregistered = append(unregistered, "Handler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (s *SwaggerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return s.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (s *SwaggerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]httpkit.Authenticator {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (s *SwaggerAPI) ConsumersFor(mediaTypes []string) map[string]httpkit.Consumer {

	return nil

}

// ProducersFor gets the producers for the specified media types
func (s *SwaggerAPI) ProducersFor(mediaTypes []string) map[string]httpkit.Producer {

	return nil

}

// HandlerFor gets a http.Handler for the provided operation id
func (s *SwaggerAPI) HandlerFor(operationID string) (http.Handler, bool) {
	if s.handlers == nil {
		return nil, false
	}
	h, ok := s.handlers[operationID]
	return h, ok
}

func (s *SwaggerAPI) initHandlerCache() {
	if s.context == nil {
		s.context = middleware.NewRoutableContext(s.spec, s, nil)
	}

	s.handlers = make(map[string]http.Handler)

	s.handlers[""] = New(s.context, s.Handler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve())
func (s *SwaggerAPI) Serve() http.Handler {
	if len(s.handlers) == 0 {
		s.initHandlerCache()
	}

	return s.context.APIHandler()
}
