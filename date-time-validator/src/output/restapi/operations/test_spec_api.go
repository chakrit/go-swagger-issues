package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/spec"
	"github.com/go-swagger/go-swagger/strfmt"
)

// NewTestSpecAPI creates a new TestSpec instance
func NewTestSpecAPI(spec *spec.Document) *TestSpecAPI {
	t := &TestSpecAPI{
		spec:            spec,
		handlers:        make(map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
	}

	return t
}

// TestSpecAPI Find all your aftersale tickets here.
type TestSpecAPI struct {
	spec            *spec.Document
	context         *middleware.Context
	handlers        map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string

	// Handler sets the operation handler for the  operation
	Handler Handler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)
}

// SetDefaultProduces sets the default produces media type
func (t *TestSpecAPI) SetDefaultProduces(mediaType string) {
	t.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (t *TestSpecAPI) SetDefaultConsumes(mediaType string) {
	t.defaultConsumes = mediaType
}

// DefaultProduces returns the default produces media type
func (t *TestSpecAPI) DefaultProduces() string {
	return t.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (t *TestSpecAPI) DefaultConsumes() string {
	return t.defaultConsumes
}

// Formats returns the registered string formats
func (t *TestSpecAPI) Formats() strfmt.Registry {
	return t.formats
}

// RegisterFormat registers a custom format validator
func (t *TestSpecAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	t.formats.Add(name, format, validator)
}

// Validate validates the registrations in the TestSpecAPI
func (t *TestSpecAPI) Validate() error {
	var unregistered []string

	if t.Handler == nil {
		unregistered = append(unregistered, "Handler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (t *TestSpecAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return t.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (t *TestSpecAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]httpkit.Authenticator {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (t *TestSpecAPI) ConsumersFor(mediaTypes []string) map[string]httpkit.Consumer {

	return nil

}

// ProducersFor gets the producers for the specified media types
func (t *TestSpecAPI) ProducersFor(mediaTypes []string) map[string]httpkit.Producer {

	return nil

}

// HandlerFor gets a http.Handler for the provided operation id
func (t *TestSpecAPI) HandlerFor(operationID string) (http.Handler, bool) {
	if t.handlers == nil {
		return nil, false
	}
	h, ok := t.handlers[operationID]
	return h, ok
}

func (t *TestSpecAPI) initHandlerCache() {
	if t.context == nil {
		t.context = middleware.NewRoutableContext(t.spec, t, nil)
	}

	t.handlers = make(map[string]http.Handler)

	t.handlers[""] = New(t.context, t.Handler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve())
func (t *TestSpecAPI) Serve() http.Handler {
	if len(t.handlers) == 0 {
		t.initHandlerCache()
	}

	return t.context.APIHandler()
}
